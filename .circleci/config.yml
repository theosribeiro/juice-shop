#Arquivo de configuracao do pipeline Circle CI
# Versao do Circle CI
version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.3.0
  aws-cli: circleci/aws-cli@3.1.4
  # synk: snyk/snyk@1.4.0
  terraform: circleci/terraform@3.1

jobs:
  build: 
    docker:
      - image: cimg/node:22.18.0
    steps:
      - checkout
      - run: 
          name: "Instalar angular"
          command: sudo npm install -g @angular/cli
      - run: 
          name: "Instalar grunt"
          command: sudo npm install -g grunt-cli
      - run: 
          name: "Instalar dependencias"
          command: npm install
      - run: 
          name: "Listar Arquivos"
          command: ls -la
      - persist_to_workspace:
          root: .
          paths:
            - ./*
          
  test:
    docker:
      - image: cimg/node:22.18.0-browsers
    steps:
      - attach_workspace:
          at: .
      - run: 
          name: "Adicionar repositorio do Mozilla Team"
          command: |
            sudo add-apt-repository -y ppa:mozillateam/ppa -y
            echo '
            Package: firefox*
            Pin: release o=LP-PPA-mozillateam
            Pin-Priority: 501
            ' | sudo tee /etc/apt/preferences.d/mozilla-firefox
      - run: 
          name: "Instalar Firefox"
          command: | 
            sudo apt-get update
            sudo apt-get install -y firefox
      - run: 
          name: "Verificar versao do Firefox"
          command: firefox --version
      - run: 
          name: "Instalar Google Chrome"
          command: |
            sudo apt-get update
            sudo apt-get install -y wget gnupg
            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
            sudo apt-get update
            sudo apt-get install -y google-chrome-stable
      - run:
          name: "Configurar CHROME_BIN"
          command: echo 'export CHROME_BIN=/usr/bin/google-chrome' >> $BASH_ENV
      - run: 
          name: "Listar arquivos"
          command: ls -la
      - run: 
          name: "Instalar Angular CLI"
          command: sudo npm install -g @angular/cli
      - run: 
          name: "Instalar Grunt CLI"
          command: sudo npm install -g grunt-cli
      - run: 
          name: "Rodar testes"
          command: npm run test

  # Executar o Software Composition Analysis (SCA) com Snyk
  test_sca:
    docker:
      - image: cimg/node:22.18.0
    
    environment:
      APP_NAME: "Juice Shop"
      DEFECT_DOJO_API_URL: "https://defectdojo.soulsec.net/api/v2/import-scan/"
      SCAN_TYPE: "Snyk Scan"
      REPORT_FILE: "snyk-report.json"
    
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Instalar Snyk CLI"
          command: npm install -g snyk
      - run:
          name: "Rodar Snyk Test"
          command: snyk test --severity-threshold=high --json-file-output=snyk-report.json || true
      - run:
          name: "Rodar Snyk Monitor"
          command: snyk monitor --project-name=${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH} || true

  # Configurar Semgrep para analizar somente as modificações em stand-alone mode
  #pr = pull request
  pr_test_sast:
    environment:
      SEMGREP_RULES: p/default
      # Define a branch de base para comparar as modificações
      SEMGREP_BASELINE_REF: origin/master

    docker:
      - image: returntocorp/semgrep:latest
    
    steps:
      - checkout
      - run:
          name: "Semgrep scan"
          command: semgrep ci --config semgrep-custom.yml
  
  # Configurar Semgrep para enviar o resultado completo do scan para semgrep.dev
  # Executa analise estatica completa de codigo
  test_sast:
    environment:
      SEMGREP_RULES: p/default
      APP_NAME: "Juice Shop"
      DEFECT_DOJO_API_URL: "https://defectdojo.soulsec.net/api/v2/import-scan/"
      SCAN_TYPE: "Semgrep JSON Report"
      REPORT_FILE: "semgrep-report.json"

    docker:
      - image: returntocorp/semgrep:latest

    steps:
      - checkout
      - run:
          name: "Instalar curl e jq"
          command: apk update && apk add curl jq
      - run:
          name: "Semgrep scan"
          # Roda o semgrep falhando o pipeline caso encontre problemas
          # command: semgrep ci --json -o semgrep-report.json
          # Roda o semgrep sem falhar o pipeline caso encontre problemas
          command: semgrep ci --json -o semgrep-report.json --config semgrep-custom.yml || true

  # Executar o secets scanning no repotirorio considerando apenas as modificacoes pela branch atual
  pr_test_secrets_scanning:
    docker:
      - image: trufflesecurity/trufflehog:latest
    
    environment:
      APP_NAME: "Juice Shop"
      DEFECT_DOJO_API_URL: "https://defectdojo.soulsec.net/api/v2/import-scan/"
      SCAN_TYPE: "TruffleHog Secrets Scan"
      REPORT_FILE: "trufflehog-report.json"

    steps:
      - checkout
      # Dependencias para enviar o relatorio para o Defect Dojo
      - run:
          name: "Instalar curl e jq"
          command: apk update && apk add curl jq
      - run:
          name: "Secrets Scanning"
          command: trufflehog git file://. --since-commit master --branch "$CIRCLE_BRANCH" --exclude-paths .trufflehogignore -j | tee -a trufflehog-report.json | jq

  test_secrets_scanning:
    docker:
      - image: trufflesecurity/trufflehog:latest
    
    environment:
      APP_NAME: "Juice Shop"
      DEFECT_DOJO_API_URL: "https://defectdojo.soulsec.net/api/v2/import-scan/"
      SCAN_TYPE: "TruffleHog Secrets Scan"
      REPORT_FILE: "trufflehog-report.json"

    steps:
      - checkout
      # Dependencias para enviar o relatorio para o Defect Dojo
      - run:
          name: "Instalar curl e jq"
          command: apk update && apk add curl jq
      - run:
          name: "Secrets Scanning"
          # Somente falhar se conseguir verificar as credenciais (Se conseguir conexao por meio das credenciais)
          # command: trufflehog git file://. --fail --only-verified -j | tee -a trufflehog-report.json | jq
          command: trufflehog git file://. --only-verified -j | tee -a trufflehog-report.json | jq

  # test_dast:

  # test_api_scan:

  pr_test_dast:

    docker:
      - image: ghcr.io/zaproxy/zaproxy:stable
    
    environment:
      APP_NAME: "Juice Shop"
      DEFECT_DOJO_API_URL: "https://defectdojo.soulsec.net/api/v2/import-scan/"
      SCAN_TYPE: "OWASP ZAP DAST Scan"
      REPORT_FILE: "/zap/wrk/zap-baseline-scan-report.xml"

    steps:
      - attach_workspace:
          at: /zap/wrk
      
      - run:
          # -I -> nao falhar em warnings
          command: zap-baseline.py -t "http://${cat /zap/wrk/.zap/env_stg.cname}" -I -x zap-baseline-scan-report -r baseline-report.html
          no_output_timeout: 1.5h
      
      - store_artifacts:
          path: /zap/wrk/baseline-report.html
          destination: baseline-report.html

  pr_test_api_scan:

    docker:
      - image: ghcr.io/zaproxy/zaproxy:stable
    
    environment:
        APP_NAME: "Juice Shop"
        DEFECT_DOJO_API_URL: "https://defectdojo.soulsec.net/api/v2/import-scan/"
        SCAN_TYPE: "OWASP ZAP API Scan"
        REPORT_FILE: "/zap/wrk/zap-api-scan-report.xml"

    steps:
      - attach_workspace:
          at: /zap/wrk
      
      - run:
          # -I -> nao falhar em warnings
          # -t -> target
          # -f -> format
          # -z -> zap options
          # -x -> xml report
          # -r -> html report
          command: zap-api-scan.py -t /zap/wrk/openapi.yml -f openapi -z "-configfile /zap/wrk/.zap/options.prop" -I -x /zap/wrk/zap-api-scan-report.xml -r api-scan-report.html
          no_output_timeout: 1.5h
      
      - store_artifacts:
          path: /zap/wrk/api-scan-report.html
          destination: api-scan-report.html
  
  deploy-branch-1:
    docker:
      - image: cimg/base:2022.09
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: .
      - aws-cli/setup:
          profile-name: default

      # BUILD A IMAGEM DOCKER E PUBLICAR NO DOCKER HUB
      - run:  
          name: "Build e Push da imagem Docker no Docker Hub"
          command: docker build -t $DOCKERHUB_USERNAME/juice-shop:$CIRCLE_SHA1 -t $DOCKERHUB_USERNAME/juice-shop:latest ./
      - run: 
          name: "Login no Docker Hub"
          command: echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
      - run: 
          name: "Push da imagem Docker no Docker Hub"
          command: docker push $DOCKERHUB_USERNAME/juice-shop:$CIRCLE_SHA1
      - run: 
          name: "Push da imagem Docker com a tag latest no Docker Hub"
          command: docker push $DOCKERHUB_USERNAME/juice-shop:latest

      # ATUALIZAR A APLICACAO NO AWS ELASTIC BEANSTALK
      - run:
          name: "Instalar AWS CLI"
          command: |
            sudo apt-get update
            sudo apt-get install -y awscli
      - run:
          name: "Deploy no AWS Elastic Beanstalk"
          command: |
            aws configure set region sa-east-1
            aws s3 cp ./terraform/ebs-app-options.json s3://juice-shop-tr-env-prod/ebs-app-options-$CIRCLE_SHA1.json
            aws elasticbeanstalk create-application-version --application-name juice-shop-app-prod --version-label $CIRCLE_SHA1 --source-bundle S3Bucket="juice-shop-tr-env-prod",S3Key="ebs-app-options-$CIRCLE_SHA1.json"
            aws elasticbeanstalk update-environment --environment-name juice-shop-env-prod --version-label $CIRCLE_SHA1
            aws elasticbeanstalk describe-environments --environment-name $EBS_ENV_NAME | jq -r '.environments[].CNAME' >> ./.zap/env_stg.cname
  
  deploy-prod:
    docker:
      - image: cimg/base:2022.09
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: .
      - aws-cli/setup:
          profile-name: default

      # BUILD A IMAGEM DOCKER E PUBLICAR NO DOCKER HUB
      - run:  
          name: "Build e Push da imagem Docker no Docker Hub"
          command: docker build -t $DOCKERHUB_USERNAME/juice-shop:$CIRCLE_SHA1 -t $DOCKERHUB_USERNAME/juice-shop:latest ./
      - run: 
          name: "Login no Docker Hub"
          command: echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
      - run: 
          name: "Push da imagem Docker no Docker Hub"
          command: docker push $DOCKERHUB_USERNAME/juice-shop:$CIRCLE_SHA1
      - run: 
          name: "Push da imagem Docker com a tag latest no Docker Hub"
          command: docker push $DOCKERHUB_USERNAME/juice-shop:latest

      # ATUALIZAR A APLICACAO NO AWS ELASTIC BEANSTALK
      - run:
          name: "Instalar AWS CLI"
          command: |
            sudo apt-get update
            sudo apt-get install -y awscli
      - run:
          name: "Deploy no AWS Elastic Beanstalk"
          command: |
            aws configure set region sa-east-1
            aws s3 cp ./terraform/ebs-app-options.json s3://juice-shop-tr-env-prod/ebs-app-options-$CIRCLE_SHA1.json
            aws elasticbeanstalk create-application-version --application-name juice-shop-app-prod --version-label $CIRCLE_SHA1 --source-bundle S3Bucket="juice-shop-tr-env-prod",S3Key="ebs-app-options-$CIRCLE_SHA1.json"
            aws elasticbeanstalk update-environment --environment-name juice-shop-env-prod --version-label $CIRCLE_SHA1
            ws elasticbeanstalk describe-environments --environment-name $EBS_ENV_NAME | jq -r '.environments[].CNAME' >> ./.zap/env_stg.cname
  
  # Deploy infra
  infrastructure_deploy:
    executor: terraform/default
    steps:
      - checkout
      - run: ls -la | grep terraform
      - terraform/init:
          path: ./terraform
          extra_args: -reconfigure
      - terraform/validate:
          path: ./terraform
      - terraform/fmt:
          path: ./terraform
      - terraform/plan:
          path: ./terraform
      - terraform/apply:
          path: ./terraform
    
    working_directory: ~/src


workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - test_sca:
          requires:
            - build
      - test_secrets_scanning:
          requires:
            - build
          filters:
            branches:
              only: master
      - pr_test_secrets_scanning:
          requires:
            - build
          filters:
            branches:
              ignore: master
      - test_sast:
          requires:
            - build
          filters:
            branches:
              only: master
      - pr_test_sast:
          requires:
            - build
          filters:
            branches:
              ignore: master
          
      # - deploy-stg:
      #     requires:
      #       - test
      #       - test_sca
      #       - pr_test_secrets_scanning
      #       - pr_test_sast
      #     filters:
      #       branches:
      #         only: staging
      - deploy-branch-1:
          requires:
            - test
            - test_sca
            - pr_test_secrets_scanning
            - pr_test_sast
          filters:
            branches:
              only: branch-1
      - pr_test_dast:
          requires:
            - deploy-branch-1
          filters:
            branches:
              ignore: master
      - pr_test_api_scan:
          requires:
            - deploy-branch-1
          filters:
            branches:
              ignore: master
      - deploy-prod:
          requires:
            - test
            - test_sca
            - test_secrets_scanning
            - test_sast
          filters:
            branches:
              only: master
      - pr_test_dast:
          requires:
            - deploy-prod
          filters:
            branches:
              only: master
      - pr_test_api_scan:
          requires:
            - deploy-prod
          filters:
            branches:
              only: master
      - infrastructure_deploy:
          filters:
            branches:
              only: terraform